---

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: install ara dependencies
  become: true
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ ara_dependencies }}"

- name: install ARA Records Ansible
  become: true
  pip:
    name: ara

- name: register ara to a systemd system
  become: true
  template:
    src: ara.service.j2
    dest: /etc/systemd/system/ara.service
  notify:
    - systemctl daemon-reload

- name: find plugins & library paths
  command: "{{ item }}"
  changed_when: no
  register: ara_plugins_library_paths
  with_items:
    - python -m ara.setup.action_plugins
    - python -m ara.setup.callback_plugins
    - python -m ara.setup.library

- name: configure ansible to use ara
  become: true
  ini_file:
    path: "{{ ara_configuration_file }}"
    section: defaults
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { option: action_plugins, value: "{{ ara_plugins_library_paths.results[0].stdout }}" }
    - { option: callback_plugins, value: "{{ ara_plugins_library_paths.results[1].stdout }}" }
    - { option: library, value: "{{ ara_plugins_library_paths.results[2].stdout }}" }
  notify:
    - restart ara
  when:
    - ara_configuration_file is defined

- name: configure ara
  become: true
  ini_file:
    path: "{{ ara_configuration_file }}"
    section: ara
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  notify:
    - restart ara
  with_items:
    - "{{ ara_configuration }}"
  when:
    - ara_configuration is defined

- name: start and enable ara
  become: true
  service:
    name: ara
    state: started
    enabled: yes